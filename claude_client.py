"""
Claude API client for processing call transcripts and creating summaries.
"""
from anthropic import Anthropic
from typing import Dict


class ClaudeClient:
    """Client for interacting with Claude API."""

    def __init__(self, api_key: str):
        """Initialize Claude client with API key."""
        self.client = Anthropic(api_key=api_key)

    def summarize_transcript(
        self,
        transcript: str,
        attendee_name: str,
        meeting_description: str
    ) -> Dict[str, str]:
        """
        Create a structured summary of the call transcript.

        Args:
            transcript: The call transcript
            attendee_name: Name of the person called
            meeting_description: Description of the meeting

        Returns:
            Dict with 'summary' and 'key_points' keys
        """
        prompt = f"""You are analyzing a meeting preparation call transcript. The call was with {attendee_name} regarding "{meeting_description}".

Please analyze the transcript and provide:

1. EXECUTIVE SUMMARY: A concise 2-3 sentence summary of the key takeaways
2. MAIN GOALS: List the attendee's main goals for the meeting
3. TOPICS TO COVER: Specific topics or questions they want to discuss
4. PAIN POINTS: Any challenges or concerns they mentioned
5. ACTION ITEMS: Any preparation Marc should do before the meeting

Format your response in clear markdown with these exact section headers.

Transcript:
{transcript}
"""

        try:
            message = self.client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=2000,
                temperature=0.7,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )

            # Extract the text response
            summary = message.content[0].text

            return {
                "summary": summary,
                "raw_response": message
            }

        except Exception as e:
            raise Exception(f"Error generating summary with Claude: {e}")

    def format_full_report(
        self,
        attendee_name: str,
        phone_number: str,
        meeting_description: str,
        transcript: str,
        summary: str,
        timestamp: str
    ) -> str:
        """
        Format a complete meeting preparation report.

        Args:
            attendee_name: Name of the person called
            phone_number: Their phone number
            meeting_description: Description of the meeting
            transcript: The full call transcript
            summary: The AI-generated summary
            timestamp: ISO timestamp of the call

        Returns:
            Formatted markdown report
        """
        report = f"""# Meeting Preparation Call - {attendee_name}

**Date & Time:** {timestamp}
**Attendee:** {attendee_name}
**Phone:** {phone_number}
**Meeting:** {meeting_description}

---

## Summary

{summary}

---

## Full Transcript

```
{transcript}
```

---

*This report was automatically generated by Alex, Marc's AI meeting preparation assistant.*
"""
        return report
